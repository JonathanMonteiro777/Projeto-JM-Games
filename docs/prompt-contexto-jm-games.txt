================================================================================
PROMPT DE CONTEXTO - PROJETO JM GAMES (ATUALIZADO)
================================================================================

📋 CONTEXTO DO PROJETO:
- Nome: JM Games - Loja Virtual de Games
- Objetivo: Projeto de portfólio para demonstrar habilidades front-end
- Tecnologias: HTML5, CSS3, Bootstrap 5, JavaScript (ESM - Módulos ES), jQuery.
- Foco: Funcionalidades práticas que impressionem recrutadores

🎨 IDENTIDADE VISUAL DEFINIDA:
- Cor primária: #1a73e8 (azul Google)
- Cor secundária: #f4b400 (amarelo Google)
- Tipografia: Open Sans (corpo) + Montserrat (títulos)
- Estilo: Moderno, limpo, profissional, inspirado em grandes lojas

📁 ESTRUTURA DE ARQUIVOS (Confirmada):
jm-games/
├── css/
│   ├── _variables.css
│   ├── base.css
│   ├── components.css
│   ├── layout.css
│   └── main.css
├── docs/
│   ├── checklist-portifolio.txt
│   ├── funcionalidades-implementar.txt
│   ├── identidade-visual-jm-games.txt
│   └── prompt-contexto-jm-games.txt
├── img/
├── js/
│   ├── detalhes.js               // Lógica específica para a página de detalhes do produto
│   ├── jquery-script.js          // Scripts dependentes de jQuery
│   ├── login-page.js             // Lógica específica para a página de login/cadastro
│   ├── main.js                   // Script principal do site (navbar, global UI updates, index-page logic)
│   └── classes/
│       ├── AuthManager.js        // Classe para gerenciamento de autenticação
|       ├── BuscaManager.js        // Classe para gerenciamento da busca (antiga SearchManager)
│       ├── CarrinhoManager.js    // Classe para gerenciamento do carrinho
│       └── FavoritosManager.js   // Classe para gerenciamento de favoritos
│   └── services/
│       └── rawgApi.js            // Serviço para interagir com a API RAWG
│   └── utils/
│       ├── domUtils.js           // Funções utilitárias para manipulação do DOM
│       ├── helpers.js            // Funções utilitárias diversas
│       └── validationUtils.js    // Funções utilitárias para validação
├── pages/
│   └── detalhes.html             // Página de detalhes do produto
├── index.html
├── login.html
└── README.md


---

✅ FUNCIONALIDADES JÁ IMPLEMENTADAS:
---

* **1. Sistema de Autenticação (Login/Cadastro):**
    * Formulários de Login e Cadastro unificados em `login.html` com alternância dinâmica.
    * Classe `AuthManager` completa (gerencia login/cadastro, validação de formulários, persistência via localStorage e atualização da navbar).
    * Script `login-page.js` para integração UI/lógica de autenticação.

* **2. Carrinho de Compras Funcional:**
    * Classe `CarrinhoManager` completa e funcional (adicionar, remover, atualizar quantidade, calcular total, salvar/carregar do localStorage).
    * Integração no `index.html` com botões "Adicionar ao Carrinho" e offcanvas de exibição/gerenciamento do carrinho.

* **3. Sistema de Favoritos Funcional:**
    * Classe `FavoritosManager` completa e funcional (adicionar, remover, salvar/carregar do localStorage).
    * Integração no `index.html` com botões "Adicionar aos Favoritos" e offcanvas de exibição/gerenciamento dos favoritos.

* **4. Sistema de Busca e Filtragem com Paginação (RAWG API):**
    * Busca de jogos por texto livre, utilizando a `rawgApi.js`.
    * Filtros por gênero e plataforma, implementados em um menu "hambúrguer".
    * Funções `fetchGenres` e `fetchPlatforms` adicionadas à `rawgApi.js`.
    * Implementação completa da paginação para navegar pelos resultados da busca.
    * **Loading states** (spinner de carregamento) exibidos durante a busca.
    * Mensagem "Nenhum resultado encontrado" exibida para buscas sem sucesso.

* **5. Página de Detalhes do Produto (`detalhes.html`):**
    * Exibição de informações detalhadas do jogo.
    * **Galeria de screenshots** para visualização do jogo.

* **6. Notificações Toast:**
    * Função `showToast` implementada em `js/utils/domUtils.js` para feedback visual ao usuário em todas as ações pertinentes (adicionar/remover do carrinho/favoritos, login/logout, etc.).

* **7. Validação de Formulários:**
    * Já parte do `AuthManager` e disponível via `validationUtils.js` (validando campos obrigatórios, emails, etc.).

* **8. Estilização Base:**
    * Sistema de cores com variáveis CSS (`_variables.css`).
    * Tipografia responsiva.
    * Layout responsivo (768px e 576px breakpoints iniciais).
    * Componentes visuais: cards, botões, formulários.
    * Hover effects e transições.

---

🚧 PRÓXIMAS FUNCIONALIDADES PARA IMPLEMENTAR:
---

1.  **Refinamento da Responsividade (`Responsividade Perfeita`):**
    * Revisar e aprimorar o CSS para garantir que o layout se adapte impecavelmente a *todos* os tamanhos de tela (mobile, tablet, desktop). Focar em breakpoints específicos e ajustes finos para uma experiência de usuário sem falhas em qualquer dispositivo.

2.  **Melhorias de UX/UI / Otimização (Escolher uma ou mais, ou outras que surjam):**
    * **Ordenação Dinâmica:** Adicionar opções para o usuário ordenar os jogos por diferentes critérios (e.g., data de lançamento, nome, popularidade, preço) através de um dropdown ou conjunto de botões na página principal de listagem.
    * **Autocompletar na Busca:** Implementar sugestões de termos de busca em tempo real enquanto o usuário digita no campo de pesquisa, utilizando a API RAWG para sugestões.
    * **Lazy Loading de Imagens:** Otimizar a performance do site carregando as imagens dos cards de jogos apenas quando elas entram na viewport do usuário, melhorando o tempo de carregamento inicial.

---

✅ CHECKLISTS GERAIS (Revisão e Aprimoramento Contínuo):
---

* **CHECKLIST DE RESPONSIVIDADE (OBRIGATÓRIO):**
    * Testar em Chrome DevTools (todos os dispositivos)
    * Menu mobile funcional
    * Cards se adaptam bem
    * Formulários usáveis no mobile
    * Botões com tamanho adequado (44px mínimo)
    * Texto legível em todas as telas
    * Imagens não quebram o layout

* **CHECKLIST DE ACESSIBILIDADE (DIFERENCIAL):**
    * Alt text em todas as imagens
    * Labels associados aos inputs
    * Contraste adequado (usar WebAIM)
    * Navegação por teclado (Tab)
    * Focus states visíveis
    * Semântica HTML5 correta

* **CHECKLIST VISUAL (IMPRESSIONAR RECRUTADORES):**
    * Paleta de cores consistente
    * Tipografia harmoniosa
    * Espaçamentos uniformes
    * Hover effects suaves
    * Transições bem aplicadas
    * Visual profissional (não amador)

* **PERFORMANCE (PONTOS EXTRAS):**
    * Imagens otimizadas (WebP se possível)
    * CSS minificado
    * JavaScript sem erros no console
    * Carregamento rápido
    * Sem recursos desnecessários

---

📊 COMO APRESENTAR NO PORTFÓLIO:
---

DESTAQUE ESTAS FUNCIONALIDADES:
* "Carrinho de compras completo com persistência em localStorage."
* "Sistema de busca e filtragem dinâmica de jogos com paginação e integração RAWG API."
* "Autenticação e validação de formulários client-side robusta."
* "Design responsivo e interativo, focado na experiência do usuário."
* "Acessibilidade (WCAG 2.1) - **se implementado totalmente**."

FRASES PARA O README:
* "Simulação completa de e-commerce front-end desenvolvida com JavaScript vanilla."
* "Integração avançada com a API RAWG para dados de jogos em tempo real, incluindo busca, filtros e paginação."
* "Foco em UX/UI, responsividade e código limpo, modular e de fácil manutenção (ES Modules)."
* "Funcionalidades essenciais como carrinho, favoritos, autenticação de usuário e página de detalhes implementadas do zero."

---